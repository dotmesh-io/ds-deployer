// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: deployer.proto

package deployer_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogsFilter struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogsFilter) Reset()         { *m = LogsFilter{} }
func (m *LogsFilter) String() string { return proto.CompactTextString(m) }
func (*LogsFilter) ProtoMessage()    {}
func (*LogsFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{0}
}
func (m *LogsFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogsFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogsFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LogsFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsFilter.Merge(dst, src)
}
func (m *LogsFilter) XXX_Size() int {
	return m.Size()
}
func (m *LogsFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsFilter.DiscardUnknown(m)
}

var xxx_messageInfo_LogsFilter proto.InternalMessageInfo

type LogsRequest struct {
	DeploymentId         string   `protobuf:"bytes,1,opt,name=deploymentId,proto3" json:"deploymentId,omitempty"`
	TxId                 int32    `protobuf:"varint,2,opt,name=txId,proto3" json:"txId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogsRequest) Reset()         { *m = LogsRequest{} }
func (m *LogsRequest) String() string { return proto.CompactTextString(m) }
func (*LogsRequest) ProtoMessage()    {}
func (*LogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{1}
}
func (m *LogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsRequest.Merge(dst, src)
}
func (m *LogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *LogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogsRequest proto.InternalMessageInfo

func (m *LogsRequest) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *LogsRequest) GetTxId() int32 {
	if m != nil {
		return m.TxId
	}
	return 0
}

// Logs can represent one or more lines of logs
// from the same task
type Logs struct {
	TxId                 int32    `protobuf:"varint,1,opt,name=txId,proto3" json:"txId,omitempty"`
	Line                 string   `protobuf:"bytes,2,opt,name=line,proto3" json:"line,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Logs) Reset()         { *m = Logs{} }
func (m *Logs) String() string { return proto.CompactTextString(m) }
func (*Logs) ProtoMessage()    {}
func (*Logs) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{2}
}
func (m *Logs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Logs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Logs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Logs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logs.Merge(dst, src)
}
func (m *Logs) XXX_Size() int {
	return m.Size()
}
func (m *Logs) XXX_DiscardUnknown() {
	xxx_messageInfo_Logs.DiscardUnknown(m)
}

var xxx_messageInfo_Logs proto.InternalMessageInfo

func (m *Logs) GetTxId() int32 {
	if m != nil {
		return m.TxId
	}
	return 0
}

func (m *Logs) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

type UpdateDeployerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDeployerRequest) Reset()         { *m = UpdateDeployerRequest{} }
func (m *UpdateDeployerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDeployerRequest) ProtoMessage()    {}
func (*UpdateDeployerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{3}
}
func (m *UpdateDeployerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDeployerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDeployerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateDeployerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeployerRequest.Merge(dst, src)
}
func (m *UpdateDeployerRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDeployerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeployerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeployerRequest proto.InternalMessageInfo

type UpdateDeployerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDeployerResponse) Reset()         { *m = UpdateDeployerResponse{} }
func (m *UpdateDeployerResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateDeployerResponse) ProtoMessage()    {}
func (*UpdateDeployerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{4}
}
func (m *UpdateDeployerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDeployerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDeployerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateDeployerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeployerResponse.Merge(dst, src)
}
func (m *UpdateDeployerResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDeployerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeployerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeployerResponse proto.InternalMessageInfo

type DeploymentFilter struct {
	Cluster              string   `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	DeployerName         string   `protobuf:"bytes,2,opt,name=deployerName,proto3" json:"deployerName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeploymentFilter) Reset()         { *m = DeploymentFilter{} }
func (m *DeploymentFilter) String() string { return proto.CompactTextString(m) }
func (*DeploymentFilter) ProtoMessage()    {}
func (*DeploymentFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{5}
}
func (m *DeploymentFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeploymentFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentFilter.Merge(dst, src)
}
func (m *DeploymentFilter) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentFilter.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentFilter proto.InternalMessageInfo

func (m *DeploymentFilter) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DeploymentFilter) GetDeployerName() string {
	if m != nil {
		return m.DeployerName
	}
	return ""
}

type Deployment struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// string imageName           = 4; // model image
	// int64  containerPort       = 5; // on which port container starts HTTP server
	Deployment           *DeploymentSpec   `protobuf:"bytes,5,opt,name=deployment" json:"deployment,omitempty"`
	Service              *ServiceSpec      `protobuf:"bytes,6,opt,name=service" json:"service,omitempty"`
	Ingress              *IngressSpec      `protobuf:"bytes,7,opt,name=ingress" json:"ingress,omitempty"`
	Metrics              *MetricsSpec      `protobuf:"bytes,8,opt,name=metrics" json:"metrics,omitempty"`
	Labels               map[string]string `protobuf:"bytes,9,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Deployment) Reset()         { *m = Deployment{} }
func (m *Deployment) String() string { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()    {}
func (*Deployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{6}
}
func (m *Deployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Deployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deployment.Merge(dst, src)
}
func (m *Deployment) XXX_Size() int {
	return m.Size()
}
func (m *Deployment) XXX_DiscardUnknown() {
	xxx_messageInfo_Deployment.DiscardUnknown(m)
}

var xxx_messageInfo_Deployment proto.InternalMessageInfo

func (m *Deployment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Deployment) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Deployment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Deployment) GetDeployment() *DeploymentSpec {
	if m != nil {
		return m.Deployment
	}
	return nil
}

func (m *Deployment) GetService() *ServiceSpec {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *Deployment) GetIngress() *IngressSpec {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *Deployment) GetMetrics() *MetricsSpec {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *Deployment) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ServicePort struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Protocol             string   `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port                 int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	TargetPort           int32    `protobuf:"varint,4,opt,name=targetPort,proto3" json:"targetPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServicePort) Reset()         { *m = ServicePort{} }
func (m *ServicePort) String() string { return proto.CompactTextString(m) }
func (*ServicePort) ProtoMessage()    {}
func (*ServicePort) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{7}
}
func (m *ServicePort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicePort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicePort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServicePort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicePort.Merge(dst, src)
}
func (m *ServicePort) XXX_Size() int {
	return m.Size()
}
func (m *ServicePort) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicePort.DiscardUnknown(m)
}

var xxx_messageInfo_ServicePort proto.InternalMessageInfo

func (m *ServicePort) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServicePort) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *ServicePort) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ServicePort) GetTargetPort() int32 {
	if m != nil {
		return m.TargetPort
	}
	return 0
}

type ServiceSpec struct {
	Ports                []*ServicePort `protobuf:"bytes,1,rep,name=ports" json:"ports,omitempty"`
	Type                 string         `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	LoadBalancerIP       string         `protobuf:"bytes,3,opt,name=loadBalancerIP,proto3" json:"loadBalancerIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ServiceSpec) Reset()         { *m = ServiceSpec{} }
func (m *ServiceSpec) String() string { return proto.CompactTextString(m) }
func (*ServiceSpec) ProtoMessage()    {}
func (*ServiceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{8}
}
func (m *ServiceSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServiceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSpec.Merge(dst, src)
}
func (m *ServiceSpec) XXX_Size() int {
	return m.Size()
}
func (m *ServiceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSpec proto.InternalMessageInfo

func (m *ServiceSpec) GetPorts() []*ServicePort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *ServiceSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ServiceSpec) GetLoadBalancerIP() string {
	if m != nil {
		return m.LoadBalancerIP
	}
	return ""
}

type DeploymentSpec struct {
	Replicas             int64    `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Image                string   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Ports                []int32  `protobuf:"varint,3,rep,packed,name=ports" json:"ports,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeploymentSpec) Reset()         { *m = DeploymentSpec{} }
func (m *DeploymentSpec) String() string { return proto.CompactTextString(m) }
func (*DeploymentSpec) ProtoMessage()    {}
func (*DeploymentSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{9}
}
func (m *DeploymentSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeploymentSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentSpec.Merge(dst, src)
}
func (m *DeploymentSpec) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentSpec proto.InternalMessageInfo

func (m *DeploymentSpec) GetReplicas() int64 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *DeploymentSpec) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DeploymentSpec) GetPorts() []int32 {
	if m != nil {
		return m.Ports
	}
	return nil
}

type IngressSpec struct {
	Class                string   `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`
	Host                 string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IngressSpec) Reset()         { *m = IngressSpec{} }
func (m *IngressSpec) String() string { return proto.CompactTextString(m) }
func (*IngressSpec) ProtoMessage()    {}
func (*IngressSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{10}
}
func (m *IngressSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IngressSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IngressSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IngressSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngressSpec.Merge(dst, src)
}
func (m *IngressSpec) XXX_Size() int {
	return m.Size()
}
func (m *IngressSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_IngressSpec.DiscardUnknown(m)
}

var xxx_messageInfo_IngressSpec proto.InternalMessageInfo

func (m *IngressSpec) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *IngressSpec) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type MetricsSpec struct {
	Classes              string   `protobuf:"bytes,1,opt,name=classes,proto3" json:"classes,omitempty"`
	Image                string   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Record               bool     `protobuf:"varint,3,opt,name=record,proto3" json:"record,omitempty"`
	ModelProxyPort       int32    `protobuf:"varint,4,opt,name=modelProxyPort,proto3" json:"modelProxyPort,omitempty"`
	ModelProxyAPIPort    int32    `protobuf:"varint,5,opt,name=modelProxyAPIPort,proto3" json:"modelProxyAPIPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricsSpec) Reset()         { *m = MetricsSpec{} }
func (m *MetricsSpec) String() string { return proto.CompactTextString(m) }
func (*MetricsSpec) ProtoMessage()    {}
func (*MetricsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{11}
}
func (m *MetricsSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MetricsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsSpec.Merge(dst, src)
}
func (m *MetricsSpec) XXX_Size() int {
	return m.Size()
}
func (m *MetricsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsSpec proto.InternalMessageInfo

func (m *MetricsSpec) GetClasses() string {
	if m != nil {
		return m.Classes
	}
	return ""
}

func (m *MetricsSpec) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *MetricsSpec) GetRecord() bool {
	if m != nil {
		return m.Record
	}
	return false
}

func (m *MetricsSpec) GetModelProxyPort() int32 {
	if m != nil {
		return m.ModelProxyPort
	}
	return 0
}

func (m *MetricsSpec) GetModelProxyAPIPort() int32 {
	if m != nil {
		return m.ModelProxyAPIPort
	}
	return 0
}

type GetDeploymentsResponse struct {
	Deployments          []*Deployment `protobuf:"bytes,1,rep,name=deployments" json:"deployments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetDeploymentsResponse) Reset()         { *m = GetDeploymentsResponse{} }
func (m *GetDeploymentsResponse) String() string { return proto.CompactTextString(m) }
func (*GetDeploymentsResponse) ProtoMessage()    {}
func (*GetDeploymentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{12}
}
func (m *GetDeploymentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeploymentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeploymentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetDeploymentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeploymentsResponse.Merge(dst, src)
}
func (m *GetDeploymentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDeploymentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeploymentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeploymentsResponse proto.InternalMessageInfo

func (m *GetDeploymentsResponse) GetDeployments() []*Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

type UpdateDeploymentRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status               string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	AvailableReplicas    int64    `protobuf:"varint,4,opt,name=availableReplicas,proto3" json:"availableReplicas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDeploymentRequest) Reset()         { *m = UpdateDeploymentRequest{} }
func (m *UpdateDeploymentRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDeploymentRequest) ProtoMessage()    {}
func (*UpdateDeploymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{13}
}
func (m *UpdateDeploymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDeploymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDeploymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateDeploymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeploymentRequest.Merge(dst, src)
}
func (m *UpdateDeploymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDeploymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeploymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeploymentRequest proto.InternalMessageInfo

func (m *UpdateDeploymentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateDeploymentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateDeploymentRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdateDeploymentRequest) GetAvailableReplicas() int64 {
	if m != nil {
		return m.AvailableReplicas
	}
	return 0
}

type UpdateDeploymentResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDeploymentResponse) Reset()         { *m = UpdateDeploymentResponse{} }
func (m *UpdateDeploymentResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateDeploymentResponse) ProtoMessage()    {}
func (*UpdateDeploymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_deployer_75cb469757c14842, []int{14}
}
func (m *UpdateDeploymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDeploymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDeploymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateDeploymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeploymentResponse.Merge(dst, src)
}
func (m *UpdateDeploymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDeploymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeploymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeploymentResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LogsFilter)(nil), "deployer_v1.LogsFilter")
	proto.RegisterType((*LogsRequest)(nil), "deployer_v1.LogsRequest")
	proto.RegisterType((*Logs)(nil), "deployer_v1.Logs")
	proto.RegisterType((*UpdateDeployerRequest)(nil), "deployer_v1.UpdateDeployerRequest")
	proto.RegisterType((*UpdateDeployerResponse)(nil), "deployer_v1.UpdateDeployerResponse")
	proto.RegisterType((*DeploymentFilter)(nil), "deployer_v1.DeploymentFilter")
	proto.RegisterType((*Deployment)(nil), "deployer_v1.Deployment")
	proto.RegisterMapType((map[string]string)(nil), "deployer_v1.Deployment.LabelsEntry")
	proto.RegisterType((*ServicePort)(nil), "deployer_v1.ServicePort")
	proto.RegisterType((*ServiceSpec)(nil), "deployer_v1.ServiceSpec")
	proto.RegisterType((*DeploymentSpec)(nil), "deployer_v1.DeploymentSpec")
	proto.RegisterType((*IngressSpec)(nil), "deployer_v1.IngressSpec")
	proto.RegisterType((*MetricsSpec)(nil), "deployer_v1.MetricsSpec")
	proto.RegisterType((*GetDeploymentsResponse)(nil), "deployer_v1.GetDeploymentsResponse")
	proto.RegisterType((*UpdateDeploymentRequest)(nil), "deployer_v1.UpdateDeploymentRequest")
	proto.RegisterType((*UpdateDeploymentResponse)(nil), "deployer_v1.UpdateDeploymentResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Deployer service

type DeployerClient interface {
	StreamDeployments(ctx context.Context, in *DeploymentFilter, opts ...grpc.CallOption) (Deployer_StreamDeploymentsClient, error)
	ListDeployments(ctx context.Context, in *DeploymentFilter, opts ...grpc.CallOption) (*GetDeploymentsResponse, error)
	UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error)
	UpdateDeployer(ctx context.Context, in *UpdateDeployerRequest, opts ...grpc.CallOption) (*UpdateDeployerResponse, error)
	// rpc StreamLogs()
	StreamLogRequests(ctx context.Context, in *LogsFilter, opts ...grpc.CallOption) (Deployer_StreamLogRequestsClient, error)
	SendLogs(ctx context.Context, opts ...grpc.CallOption) (Deployer_SendLogsClient, error)
}

type deployerClient struct {
	cc *grpc.ClientConn
}

func NewDeployerClient(cc *grpc.ClientConn) DeployerClient {
	return &deployerClient{cc}
}

func (c *deployerClient) StreamDeployments(ctx context.Context, in *DeploymentFilter, opts ...grpc.CallOption) (Deployer_StreamDeploymentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Deployer_serviceDesc.Streams[0], "/deployer_v1.Deployer/StreamDeployments", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployerStreamDeploymentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deployer_StreamDeploymentsClient interface {
	Recv() (*Deployment, error)
	grpc.ClientStream
}

type deployerStreamDeploymentsClient struct {
	grpc.ClientStream
}

func (x *deployerStreamDeploymentsClient) Recv() (*Deployment, error) {
	m := new(Deployment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deployerClient) ListDeployments(ctx context.Context, in *DeploymentFilter, opts ...grpc.CallOption) (*GetDeploymentsResponse, error) {
	out := new(GetDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/deployer_v1.Deployer/ListDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployerClient) UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error) {
	out := new(UpdateDeploymentResponse)
	err := c.cc.Invoke(ctx, "/deployer_v1.Deployer/UpdateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployerClient) UpdateDeployer(ctx context.Context, in *UpdateDeployerRequest, opts ...grpc.CallOption) (*UpdateDeployerResponse, error) {
	out := new(UpdateDeployerResponse)
	err := c.cc.Invoke(ctx, "/deployer_v1.Deployer/UpdateDeployer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployerClient) StreamLogRequests(ctx context.Context, in *LogsFilter, opts ...grpc.CallOption) (Deployer_StreamLogRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Deployer_serviceDesc.Streams[1], "/deployer_v1.Deployer/StreamLogRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployerStreamLogRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deployer_StreamLogRequestsClient interface {
	Recv() (*LogsRequest, error)
	grpc.ClientStream
}

type deployerStreamLogRequestsClient struct {
	grpc.ClientStream
}

func (x *deployerStreamLogRequestsClient) Recv() (*LogsRequest, error) {
	m := new(LogsRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deployerClient) SendLogs(ctx context.Context, opts ...grpc.CallOption) (Deployer_SendLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Deployer_serviceDesc.Streams[2], "/deployer_v1.Deployer/SendLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployerSendLogsClient{stream}
	return x, nil
}

type Deployer_SendLogsClient interface {
	Send(*Logs) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type deployerSendLogsClient struct {
	grpc.ClientStream
}

func (x *deployerSendLogsClient) Send(m *Logs) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deployerSendLogsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Deployer service

type DeployerServer interface {
	StreamDeployments(*DeploymentFilter, Deployer_StreamDeploymentsServer) error
	ListDeployments(context.Context, *DeploymentFilter) (*GetDeploymentsResponse, error)
	UpdateDeployment(context.Context, *UpdateDeploymentRequest) (*UpdateDeploymentResponse, error)
	UpdateDeployer(context.Context, *UpdateDeployerRequest) (*UpdateDeployerResponse, error)
	// rpc StreamLogs()
	StreamLogRequests(*LogsFilter, Deployer_StreamLogRequestsServer) error
	SendLogs(Deployer_SendLogsServer) error
}

func RegisterDeployerServer(s *grpc.Server, srv DeployerServer) {
	s.RegisterService(&_Deployer_serviceDesc, srv)
}

func _Deployer_StreamDeployments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeploymentFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployerServer).StreamDeployments(m, &deployerStreamDeploymentsServer{stream})
}

type Deployer_StreamDeploymentsServer interface {
	Send(*Deployment) error
	grpc.ServerStream
}

type deployerStreamDeploymentsServer struct {
	grpc.ServerStream
}

func (x *deployerStreamDeploymentsServer) Send(m *Deployment) error {
	return x.ServerStream.SendMsg(m)
}

func _Deployer_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployer_v1.Deployer/ListDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerServer).ListDeployments(ctx, req.(*DeploymentFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployer_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployer_v1.Deployer/UpdateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerServer).UpdateDeployment(ctx, req.(*UpdateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployer_UpdateDeployer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeployerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerServer).UpdateDeployer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployer_v1.Deployer/UpdateDeployer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerServer).UpdateDeployer(ctx, req.(*UpdateDeployerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployer_StreamLogRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployerServer).StreamLogRequests(m, &deployerStreamLogRequestsServer{stream})
}

type Deployer_StreamLogRequestsServer interface {
	Send(*LogsRequest) error
	grpc.ServerStream
}

type deployerStreamLogRequestsServer struct {
	grpc.ServerStream
}

func (x *deployerStreamLogRequestsServer) Send(m *LogsRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _Deployer_SendLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeployerServer).SendLogs(&deployerSendLogsServer{stream})
}

type Deployer_SendLogsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Logs, error)
	grpc.ServerStream
}

type deployerSendLogsServer struct {
	grpc.ServerStream
}

func (x *deployerSendLogsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deployerSendLogsServer) Recv() (*Logs, error) {
	m := new(Logs)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Deployer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deployer_v1.Deployer",
	HandlerType: (*DeployerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeployments",
			Handler:    _Deployer_ListDeployments_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _Deployer_UpdateDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployer",
			Handler:    _Deployer_UpdateDeployer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDeployments",
			Handler:       _Deployer_StreamDeployments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamLogRequests",
			Handler:       _Deployer_StreamLogRequests_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendLogs",
			Handler:       _Deployer_SendLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "deployer.proto",
}

func (m *LogsFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogsFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeploymentId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.DeploymentId)))
		i += copy(dAtA[i:], m.DeploymentId)
	}
	if m.TxId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Logs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Logs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(m.TxId))
	}
	if len(m.Line) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Line)))
		i += copy(dAtA[i:], m.Line)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateDeployerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeployerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateDeployerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeployerResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeploymentFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cluster) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Cluster)))
		i += copy(dAtA[i:], m.Cluster)
	}
	if len(m.DeployerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.DeployerName)))
		i += copy(dAtA[i:], m.DeployerName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Deployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deployment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Deployment != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(m.Deployment.Size()))
		n1, err := m.Deployment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Service != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(m.Service.Size()))
		n2, err := m.Service.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Ingress != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(m.Ingress.Size()))
		n3, err := m.Ingress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Metrics != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(m.Metrics.Size()))
		n4, err := m.Metrics.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x4a
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovDeployer(uint64(len(k))) + 1 + len(v) + sovDeployer(uint64(len(v)))
			i = encodeVarintDeployer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDeployer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintDeployer(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServicePort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicePort) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if m.Port != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(m.Port))
	}
	if m.TargetPort != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(m.TargetPort))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServiceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for _, msg := range m.Ports {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDeployer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.LoadBalancerIP) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.LoadBalancerIP)))
		i += copy(dAtA[i:], m.LoadBalancerIP)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeploymentSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Replicas != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(m.Replicas))
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.Ports) > 0 {
		dAtA6 := make([]byte, len(m.Ports)*10)
		var j5 int
		for _, num1 := range m.Ports {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IngressSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IngressSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Class) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Class)))
		i += copy(dAtA[i:], m.Class)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MetricsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Classes) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Classes)))
		i += copy(dAtA[i:], m.Classes)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.Record {
		dAtA[i] = 0x18
		i++
		if m.Record {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ModelProxyPort != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(m.ModelProxyPort))
	}
	if m.ModelProxyAPIPort != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(m.ModelProxyAPIPort))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetDeploymentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeploymentsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, msg := range m.Deployments {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDeployer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateDeploymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeploymentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if m.AvailableReplicas != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDeployer(dAtA, i, uint64(m.AvailableReplicas))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateDeploymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeploymentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDeployer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LogsFilter) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	if m.TxId != 0 {
		n += 1 + sovDeployer(uint64(m.TxId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Logs) Size() (n int) {
	var l int
	_ = l
	if m.TxId != 0 {
		n += 1 + sovDeployer(uint64(m.TxId))
	}
	l = len(m.Line)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDeployerRequest) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDeployerResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeploymentFilter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	l = len(m.DeployerName)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Deployment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	if m.Deployment != nil {
		l = m.Deployment.Size()
		n += 1 + l + sovDeployer(uint64(l))
	}
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovDeployer(uint64(l))
	}
	if m.Ingress != nil {
		l = m.Ingress.Size()
		n += 1 + l + sovDeployer(uint64(l))
	}
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovDeployer(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDeployer(uint64(len(k))) + 1 + len(v) + sovDeployer(uint64(len(v)))
			n += mapEntrySize + 1 + sovDeployer(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServicePort) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovDeployer(uint64(m.Port))
	}
	if m.TargetPort != 0 {
		n += 1 + sovDeployer(uint64(m.TargetPort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovDeployer(uint64(l))
		}
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	l = len(m.LoadBalancerIP)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeploymentSpec) Size() (n int) {
	var l int
	_ = l
	if m.Replicas != 0 {
		n += 1 + sovDeployer(uint64(m.Replicas))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	if len(m.Ports) > 0 {
		l = 0
		for _, e := range m.Ports {
			l += sovDeployer(uint64(e))
		}
		n += 1 + sovDeployer(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IngressSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Class)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetricsSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Classes)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	if m.Record {
		n += 2
	}
	if m.ModelProxyPort != 0 {
		n += 1 + sovDeployer(uint64(m.ModelProxyPort))
	}
	if m.ModelProxyAPIPort != 0 {
		n += 1 + sovDeployer(uint64(m.ModelProxyAPIPort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeploymentsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, e := range m.Deployments {
			l = e.Size()
			n += 1 + l + sovDeployer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDeploymentRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovDeployer(uint64(l))
	}
	if m.AvailableReplicas != 0 {
		n += 1 + sovDeployer(uint64(m.AvailableReplicas))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDeploymentResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDeployer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDeployer(x uint64) (n int) {
	return sovDeployer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogsFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogsFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogsFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Logs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Logs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Logs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Line = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeployerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeployerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeployerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeployerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeployerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeployerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deployment == nil {
				m.Deployment = &DeploymentSpec{}
			}
			if err := m.Deployment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &ServiceSpec{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ingress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ingress == nil {
				m.Ingress = &IngressSpec{}
			}
			if err := m.Ingress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = &MetricsSpec{}
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeployer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDeployer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDeployer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDeployer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDeployer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDeployer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDeployer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicePort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicePort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicePort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPort", wireType)
			}
			m.TargetPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, &ServicePort{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancerIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			m.Replicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Replicas |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeployer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ports = append(m.Ports, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeployer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDeployer
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDeployer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ports = append(m.Ports, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IngressSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IngressSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IngressSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Class = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Record = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelProxyPort", wireType)
			}
			m.ModelProxyPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModelProxyPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelProxyAPIPort", wireType)
			}
			m.ModelProxyAPIPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModelProxyAPIPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeploymentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeploymentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeploymentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployments = append(m.Deployments, &Deployment{})
			if err := m.Deployments[len(m.Deployments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeploymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeploymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeploymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableReplicas", wireType)
			}
			m.AvailableReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableReplicas |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeploymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeploymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeploymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDeployer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeployer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeployer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeployer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeployer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDeployer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDeployer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDeployer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDeployer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeployer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("deployer.proto", fileDescriptor_deployer_75cb469757c14842) }

var fileDescriptor_deployer_75cb469757c14842 = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x8e, 0xe3, 0x44,
	0x10, 0x8e, 0x93, 0x49, 0x26, 0x53, 0x5e, 0x85, 0x99, 0x16, 0x64, 0xac, 0x2c, 0x44, 0x51, 0xf3,
	0xa3, 0x1c, 0x90, 0x17, 0x86, 0x03, 0x0c, 0x7b, 0x62, 0xb5, 0x03, 0x0a, 0x1a, 0x20, 0x72, 0x84,
	0x40, 0xe2, 0x80, 0x7a, 0xec, 0x26, 0x58, 0x74, 0xd2, 0xde, 0xee, 0xce, 0x68, 0x73, 0xe6, 0x25,
	0xb8, 0xf1, 0x00, 0xbc, 0x08, 0x47, 0x1e, 0x01, 0x0d, 0x8f, 0xc1, 0x05, 0xf5, 0x9f, 0xed, 0xfc,
	0x58, 0x68, 0x6f, 0x5d, 0x55, 0xdf, 0xd7, 0xae, 0xfa, 0xaa, 0xdc, 0x05, 0x83, 0x8c, 0x16, 0x8c,
	0x6f, 0xa9, 0x88, 0x0b, 0xc1, 0x15, 0x47, 0xa1, 0xb7, 0x7f, 0xbc, 0xff, 0x70, 0xf4, 0x78, 0xc9,
	0xf9, 0x92, 0xd1, 0x27, 0x26, 0x74, 0xb7, 0xf9, 0xe9, 0x09, 0x5d, 0x15, 0x6a, 0x6b, 0x91, 0xf8,
	0x11, 0xc0, 0x2d, 0x5f, 0xca, 0xcf, 0x73, 0xa6, 0xa8, 0xc0, 0x37, 0x10, 0x6a, 0x2b, 0xa1, 0x2f,
	0x36, 0x54, 0x2a, 0x84, 0xe1, 0x91, 0xbd, 0x68, 0x45, 0xd7, 0x6a, 0x96, 0x45, 0xc1, 0x24, 0x98,
	0x9e, 0x25, 0x3b, 0x3e, 0x84, 0xe0, 0x44, 0xbd, 0x9c, 0x65, 0x51, 0x7b, 0x12, 0x4c, 0xbb, 0x89,
	0x39, 0xe3, 0x18, 0x4e, 0xf4, 0x35, 0x65, 0x2c, 0xa8, 0x62, 0xda, 0xc7, 0xf2, 0x35, 0x35, 0xf8,
	0xb3, 0xc4, 0x9c, 0xf1, 0x25, 0xbc, 0xf1, 0x6d, 0x91, 0x11, 0x45, 0x9f, 0xbb, 0xb4, 0x5d, 0x02,
	0x38, 0x82, 0xe1, 0x7e, 0x40, 0x16, 0x7c, 0x2d, 0x29, 0x9e, 0xc3, 0xf9, 0xf3, 0x32, 0x0d, 0x9b,
	0x3d, 0x8a, 0xe0, 0x34, 0x65, 0x1b, 0xa9, 0xa8, 0x70, 0x99, 0x7a, 0xb3, 0x2a, 0x84, 0x8a, 0xaf,
	0xc9, 0xca, 0x7f, 0x7c, 0xc7, 0x87, 0x7f, 0xef, 0x00, 0x54, 0x57, 0xa2, 0x01, 0xb4, 0x73, 0x5f,
	0x71, 0x3b, 0xcf, 0xd0, 0x9b, 0x70, 0xb6, 0x26, 0x2b, 0x2a, 0x0b, 0x92, 0x7a, 0x7e, 0xe5, 0xd0,
	0x55, 0x69, 0x23, 0xea, 0xd8, 0xaa, 0xf4, 0x19, 0x3d, 0x05, 0xa8, 0x94, 0x8a, 0xba, 0x93, 0x60,
	0x1a, 0x5e, 0x3d, 0x8e, 0x6b, 0x9d, 0x89, 0xab, 0xcf, 0x2d, 0x0a, 0x9a, 0x26, 0x35, 0x38, 0xba,
	0x82, 0x53, 0x49, 0xc5, 0x7d, 0x9e, 0xd2, 0xa8, 0x67, 0x98, 0xd1, 0x0e, 0x73, 0x61, 0x63, 0x86,
	0xe6, 0x81, 0x9a, 0x93, 0xaf, 0x97, 0x82, 0x4a, 0x19, 0x9d, 0x1e, 0xe1, 0xcc, 0x6c, 0xcc, 0x72,
	0x1c, 0x50, 0x73, 0x56, 0x54, 0x89, 0x3c, 0x95, 0x51, 0xff, 0x08, 0xe7, 0x2b, 0x1b, 0xb3, 0x1c,
	0x07, 0x44, 0x4f, 0xa1, 0xc7, 0xc8, 0x1d, 0x65, 0x32, 0x3a, 0x9b, 0x74, 0xa6, 0xe1, 0xd5, 0xdb,
	0x0d, 0x45, 0xc5, 0xb7, 0x06, 0x75, 0xb3, 0x56, 0x62, 0x9b, 0x38, 0xca, 0xe8, 0x1a, 0xc2, 0x9a,
	0x1b, 0x9d, 0x43, 0xe7, 0x17, 0xba, 0x75, 0x3a, 0xeb, 0x23, 0x7a, 0x1d, 0xba, 0xf7, 0x84, 0x6d,
	0xbc, 0xc8, 0xd6, 0xf8, 0xb4, 0xfd, 0x49, 0x80, 0x5f, 0x40, 0xe8, 0xea, 0x9e, 0x73, 0xa1, 0x4a,
	0xcd, 0x83, 0x9a, 0xe6, 0x23, 0xe8, 0x9b, 0xb9, 0x4e, 0x39, 0x73, 0xfc, 0xd2, 0xd6, 0xf8, 0x82,
	0x0b, 0x65, 0x7a, 0xd4, 0x4d, 0xcc, 0x19, 0x8d, 0x01, 0x14, 0x11, 0x4b, 0xaa, 0xf4, 0x8d, 0xd1,
	0x89, 0x89, 0xd4, 0x3c, 0x78, 0x5b, 0x7e, 0x52, 0x4b, 0x80, 0x62, 0xe8, 0x6a, 0x9a, 0x8c, 0x02,
	0x53, 0xf8, 0xd1, 0x9e, 0x68, 0x5e, 0x62, 0x61, 0xe6, 0x07, 0xd8, 0x16, 0xe5, 0xb0, 0xeb, 0x33,
	0x7a, 0x0f, 0x06, 0x8c, 0x93, 0xec, 0x19, 0x61, 0x64, 0x9d, 0x52, 0x31, 0x9b, 0xbb, 0xa1, 0xd9,
	0xf3, 0xe2, 0xef, 0x61, 0xb0, 0x3b, 0x1f, 0xba, 0x38, 0x41, 0x0b, 0x96, 0xa7, 0x44, 0x9a, 0xa2,
	0x3b, 0x49, 0x69, 0x6b, 0xd5, 0xf2, 0x15, 0x59, 0x96, 0xaa, 0x19, 0x43, 0x7b, 0x6d, 0xbe, 0x9d,
	0x49, 0x67, 0xda, 0x75, 0x59, 0xe1, 0x8f, 0x21, 0xac, 0xcd, 0x82, 0x06, 0xa5, 0x8c, 0x48, 0xe9,
	0x84, 0xb4, 0x86, 0x4e, 0xfd, 0x67, 0x2e, 0x95, 0x4f, 0x5d, 0x9f, 0xf1, 0x1f, 0x01, 0x84, 0xb5,
	0x89, 0xb0, 0x3f, 0x1c, 0x91, 0x92, 0xca, 0xea, 0x87, 0x33, 0x66, 0x43, 0x3a, 0x43, 0xe8, 0x09,
	0x9a, 0x72, 0x91, 0x99, 0x92, 0xfb, 0x89, 0xb3, 0xb4, 0x24, 0x2b, 0x9e, 0x51, 0x36, 0x17, 0xfc,
	0xe5, 0xb6, 0xd6, 0x89, 0x3d, 0x2f, 0x7a, 0x1f, 0x2e, 0x2a, 0xcf, 0x67, 0xf3, 0x99, 0x81, 0x76,
	0x0d, 0xf4, 0x30, 0x80, 0x17, 0x30, 0xfc, 0x82, 0xaa, 0x4a, 0x43, 0xe9, 0x1f, 0x0f, 0x74, 0x0d,
	0x61, 0xf5, 0xab, 0xf9, 0x66, 0x5e, 0x36, 0x4c, 0x71, 0x52, 0xc7, 0xe2, 0x5f, 0x03, 0xb8, 0xac,
	0x3f, 0x49, 0x06, 0xe1, 0x9e, 0xcb, 0xfd, 0x27, 0xc3, 0x0f, 0x68, 0xbb, 0x36, 0xa0, 0x43, 0xe8,
	0x49, 0x45, 0xd4, 0x46, 0xba, 0xae, 0x3b, 0x4b, 0x97, 0x46, 0xee, 0x49, 0xce, 0xc8, 0x1d, 0xa3,
	0x89, 0x6f, 0xf2, 0x89, 0x69, 0xf2, 0x61, 0x00, 0x8f, 0x20, 0x3a, 0x4c, 0xc2, 0x16, 0x77, 0xf5,
	0x6f, 0x07, 0xfa, 0xfe, 0xb9, 0x44, 0xdf, 0xc0, 0xc5, 0x42, 0x09, 0x4a, 0x56, 0x35, 0x19, 0xd0,
	0x5b, 0x0d, 0x95, 0xda, 0x67, 0x74, 0xd4, 0x24, 0x04, 0x6e, 0x7d, 0x10, 0xa0, 0xef, 0xe0, 0xb5,
	0xdb, 0x5c, 0xaa, 0x57, 0xb8, 0x6e, 0xf7, 0x75, 0x38, 0xde, 0x11, 0xdc, 0x42, 0x04, 0xce, 0xf7,
	0x4b, 0x42, 0xef, 0xec, 0x50, 0x1b, 0x64, 0x1f, 0xbd, 0xfb, 0x3f, 0xa8, 0xf2, 0x13, 0x3f, 0xc0,
	0x60, 0x77, 0x9b, 0x20, 0xdc, 0x48, 0x2d, 0x77, 0xd0, 0x5e, 0xfe, 0x0d, 0xeb, 0xa8, 0x85, 0xbe,
	0xf4, 0x4a, 0xdf, 0xf2, 0xa5, 0xa3, 0x4a, 0xb4, 0x2b, 0x65, 0xb5, 0x68, 0x47, 0xd1, 0x41, 0xc0,
	0xaf, 0x3c, 0x2d, 0xf2, 0x35, 0xf4, 0x17, 0x74, 0x9d, 0x99, 0x1d, 0x7a, 0x71, 0x80, 0x1c, 0x0d,
	0x63, 0xbb, 0xd1, 0x63, 0xbf, 0xd1, 0xe3, 0x1b, 0xbd, 0xd1, 0x71, 0x6b, 0x1a, 0x3c, 0x3b, 0xff,
	0xf3, 0x61, 0x1c, 0xfc, 0xf5, 0x30, 0x0e, 0xfe, 0x7e, 0x18, 0x07, 0xbf, 0xfd, 0x33, 0x6e, 0xdd,
	0xf5, 0x0c, 0xea, 0xa3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x87, 0x17, 0x2f, 0x94, 0x24, 0x08,
	0x00, 0x00,
}
