syntax = "proto3";
package deployer_v1;

import "google/protobuf/empty.proto";

service Deployer {   
  rpc StreamDeployments(DeploymentFilter) returns (stream Deployment) {}
  rpc ListDeployments(DeploymentFilter) returns (GetDeploymentsResponse) {}
  rpc UpdateDeployment(UpdateDeploymentRequest) returns (UpdateDeploymentResponse) {}


  rpc UpdateDeployer(UpdateDeployerRequest) returns (UpdateDeployerResponse) {}

  // rpc StreamLogs()
  rpc StreamLogRequests(LogsFilter) returns (stream LogsRequest) {}
  rpc SendLogs(stream Logs) returns (google.protobuf.Empty) {}
}

message LogsFilter {}
message LogsRequest {
  string deploymentId = 1; // deployment ID
  int32  txId         = 2; // transaction ID (multiple clients could be requesting logs for the same dep)
}

// Logs can represent one or more lines of logs
// from the same task
message Logs {
  int32  txId = 1;
  string line = 2;
}

message UpdateDeployerRequest {}
message UpdateDeployerResponse {}

message DeploymentFilter {
  string cluster      = 1;
  string deployerName = 2;
}

message Deployment {
  string id                  = 1; // deployment ID
  string namespace           = 2; // deployment namespace
  string name                = 3; // deployment name
  // string imageName           = 4; // model image
  // int64  containerPort       = 5; // on which port container starts HTTP server    
  DeploymentSpec deployment  = 5;
  ServiceSpec service        = 6;
  IngressSpec ingress        = 7; // ingress class
  MetricsSpec metrics        = 8; // ingress class
  map<string, string> labels = 9; // optional labels
}

message ServicePort {
  string name       = 1;
  string protocol   = 2;
  int32  port       = 3;
  int32  targetPort = 4;
}

message ServiceSpec {
  repeated ServicePort ports = 1;
  string               type  = 2; // NodePort/LoadBalancer and so on
  string      loadBalancerIP = 3; // by default empty, will be used for future prod deployments
}

message DeploymentSpec {
  int64  replicas      = 1;
  string image         = 2;
  repeated int32 ports = 3;
}

message IngressSpec {
  string class = 1;
  string host  = 2;
}

message MetricsSpec {
  string classes           = 1;
  string image             = 2;
  bool   record            = 3;
  int32  modelProxyPort    = 4;
  int32  modelProxyAPIPort = 5;
}

message GetDeploymentsResponse {
  repeated Deployment deployments = 1;
}

message UpdateDeploymentRequest {
  string id                = 1;
  string name              = 2;
  string status            = 3;
  int64  availableReplicas = 4;
}

message UpdateDeploymentResponse {

}